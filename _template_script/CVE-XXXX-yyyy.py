#!/usr/bin/env python3
import requests
import argparse

# Global variable for the args
args = None

def parse_args() -> argparse.Namespace:
    """
    Returns the parsed arguments passed in via argparse
    Required arguments are marked by a star (*)

    @return: the parsed args
    """

    # Add some default checks 
    parser = argparse.ArgumentParser(description="CVE-XXXX-yyyy exploit script by cc3305")
    parser.add_argument("URL", action="store", help="Target url")
    parser.add_argument("-f", "--force", action="store_true", help="Force the exploit (skip the check if the host is vulnerable)")
    parser.add_argument("-x", "--proxy", action="store", help="HTTP proxy in the format http://127.0.0.1:8080")
    parser.add_argument("-H", "--headers", action="store", help="Request Headers in the format `\"Header-Name: Header-Value\"`. Multiple -H flags are allowed")
    parser.add_argument("-c", "--cookie", action="store", help="Cookie data in the format `\"COOKIE1=VALUE1; COOKIE2=VALUE2\"`")

    # Add more checks according to exploit, e.g. add a "--command" for a RCE exploit
    parser.add_argument("-C", "--command", action="store", help="* Command to run on the target if exploited successfully")
    
    # Return the parsed args
    result = parser.parse_args()
    
    # Check if the required flags are set
    if(result.command):
        return result

    # If not print the help and exit
    print("Not all required arguments are set, required arguments are marked by a star(*)")
    parser.print_help()
    exit()

def check_vulnerable():
    """
    Check if the target is vulnerable
    If there is no way to determine if the host is vulnerable just return
    If the host is not vulnerable exit and print a error message, otherwise just return
    """
    return

def run_exploit():
    """
    Where most of the magic happens
    """
    print(f"Ran command {args.command} on {args.URL}")
    return

# Entrypoint, this gets executed first
if __name__ == "__main__":
    args = parse_args()
    if not args.force:
        check_vulnerable()
    run_exploit()


